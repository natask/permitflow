# -*- coding: utf-8 -*-
"""associated_zipcode_price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17xnq5mOVOffjVveJhZPWVfmCcnRaYxXj
"""

#IMPORT NECESSARY LIBRARIES
import re
import os
from ai21 import AI21Client
from ai21.models.chat import ChatMessage, ResponseFormat

#FINDS THE NEAREST ZIPCODES

# Initialize AI21 Client
client = AI21Client()

# User-defined ZIP code (ensure this variable is set properly)
user_zip_code = '02134'  # Example ZIP code

# Make the API call
def zipcode_price(user_zip_code):
    response = client.chat.completions.create(
        model="jamba-large-1.6",
        messages=[
            ChatMessage(
                role="user",
                content="give array of 2 zipcodes near " + user_zip_code + " return in a python array format, nothing else",
            )
        ],
        documents=[],
        tools=[],
        n=1,
        max_tokens=2048,
        temperature=0.4,
        top_p=1,
        stop=[],
        response_format=ResponseFormat(type="text"),
    )

    # Extract the model's response
    model_response = response.choices[0].message.content

    #PLACES THESE ZIPCODES IN A ARRAY FORMAT

    # Extract numbers using regex
    zip_codes = re.findall(r'"(\d+)"', model_response)
    zip_codes.append(user_zip_code)
    zip_codes = [zip_code[1:] for zip_code in zip_codes]

    print(zip_codes)

    import csv

    # Define the CSV file path
    csv_file = "resources/zip_code_price.csv"

    # Open and read the CSV file
    with open(csv_file, mode='r', newline='', encoding='utf-8') as file:
        reader = csv.DictReader(file)

        # Check if required columns exist
        if 'zip' not in reader.fieldnames:
            raise KeyError("The 'zip' column is not found in the CSV file.")
        if 'worktype' not in reader.fieldnames:
            raise KeyError("The 'worktype' column is not found in the CSV file.")
        if 'declared_valuation' not in reader.fieldnames:
            raise KeyError("The 'declared_valuation' column is not found in the CSV file.")

        # Filter records based on zip code and worktype being 'SOL'
        filtered_records = [row for row in reader if row['zip'] in zip_codes and row['worktype'] == 'SOL']

    sum_values = 0  # Renaming 'sum' to avoid conflict with built-in function
    num_records = 0

    for record in filtered_records:
        raw_value = record.get('declared_valuation')  # Get value from record

        if raw_value is not None:  # Ensure value is not None
            try:
                # Clean the value: remove '$', remove ',', and strip spaces
                cleaned_value = raw_value.replace('$', '').replace(',', '').strip()
                numeric_value = float(cleaned_value)  # Convert to float
                num_records += 1
                sum_values += numeric_value  # Add to sum
            except ValueError:
                print(f"Skipping invalid value: {raw_value}")

    # Compute average safely
    if num_records > 0:
        average_price = sum_values / num_records
        print(f"Average Declared Valuation: {average_price}")
    else:
        print("No valid records found.")